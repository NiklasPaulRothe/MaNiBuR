Aufgabe 1:

a) 13 Fehler gefunden


// - #include <stdio.h> - <> anstatt ""
#include "stdio.h"

// - Semicolon darf hier nicht stehen. define ist eine Textersetzung und das
//   semicolon würde Fehler beim einsetzen hervorrufen.
#define CURRENT_YEAR 2015;
// - Selbiges wie aus der Zeile zuvor
#define MAX_YEAR 2500;


int main(int argc, char **argv){

    // - year kann nicht in der for-schleife definiert werden.
    //   Lösung: int year; for(year = 0;...
    // - MAX_YEAR Rechtschreibfehler
    for(int year=0; year < MAX_YAER; year++){

        // - == anstatt =. Das einfache = würde year neu zuweisen anstatt einen
        //   Vergleich durchzuführen
        // - Semicolon muss entfernt werden
        if( year = CURRENT_YEAR );
            printIt(year);
        else
            // - semicolon hinter printf(...) fehlt
            // - ein \n hinter ... für eine neue Zeile macht die Ausgabe auf
            //   der Kommandozeile einfacher zu lesen.
            printf("passed the year %d...", year)
    }
// - } für die main Methode fehlt

// - Methode sollte vor der Main Methode stehen.
// - int anstatt Int beim Rückgabewert.
Int printIt(int year){
    // - Wie oben macht auch hier ein \n hinter dem %d die Ausgabe leserlicher
    printf("The current year is: %d", year);
}






b) 7 Fehler
// - #include <stdio.h> fehlt. printf verursacht Warning.
int main(int argc, char **argv){


    // - Initialisierung der Variable value fehlt.
    // - um value = 10 also abbruch zu bekommen sollte geprüft werden ob value
    //   nicht bereits mit größer 10 initialisiert worden ist und do-while
    //   somit in eine Endlosschleife läuft
    int value;
    do{
        value++;
        // - Für eine bessere Lesbarkeit der Kommandozeilenausgabe sollte
        //   hinter %d ein \n für eine neue Zeile angefügt werden.
        printf("current value: %d", value);

    // - Semicolon hinter while(...) fehlt
    // - Anstatt !(value==10) wäre value!=10 besser zu lesen.
    // - wurde (wie oben beschrieben) value richtig initialisiert, dann ist der
    //   Vergleich mit 20 überflüssig
    }while(!(value==10) || !(value==20))
    //now our value equals 10
    return 0;
}






c) 5 Fehler


#include <stdlib.h>
#include <stdio.h>
#include <string.h>


//input: single text argument
//output: text argument printed backwards
int main(int argc, char **argv){
    // - argv[0] würde den Namen des Programms zurückgeben und nicht das erste
    //   String-Argument
    // - hier war wohl malloc(strlen(argv[1])) gemeint um einen Speicher für
    //   einen String zu allokieren
    char* buff = malloc(strlen(argv[0]));
    int i;
    // - sizeof braucht einen Datentypen. Hier muss aber
    //   strlen(argv[1])-1 anstatt sizeof(...) hin um die Länge des ersten
    //   Arguments zu bekommen. -1 wird benötigt da Arrays Indizes startend mit
    //   0 haben
    for(i=sizeof(argv[0]); i>=0; i--){
        // - auch hier muss argv[1][i] genutzt werden im das erste Argument zu
        //   bekommen
        *buff++ = argv[0][i];
    }
    // - buff zeigt nicht auf das erste Element des auszugebenen Strings sondern
    //   auf das letzte. Lösung wäre ein 2. Pointer der nach der deklaration von
    //   buff geklont und dann anstelle von buff genutzt wird. So zeigt buff noch
    //   auf die richtige Speicheradresse und kann hier ausgegeben werden.
    printf("%s\n", buff);
    // - nur durch den 2. Pointer aus der Zeile drüber ist diese Zeile korrekt
    free(buff);
    return 0;
}






d) 6 Fehler
#include <stdio.h>

// - Rückgabeparameter für ein Array ist int* anstatt int[]
// - int vector[] - eckige Klammern hinter den Variablennamen und nicht dem Typen
int[] times(int[] vector, int times){
    int i;
    // - for-Schleife würde durch sizeof Vector zu weit laufen. Der Wert müsste
    //   noch durch sizeof(int) geteilt werden um die Anzahl der Elemente zu
    //   bekommen: ... i < (sizeof(vector)/sizeof(int)); ...
    for(i=0; i<sizeof(vector); i++){
        vector[i] *= times;
    }
    return vector;
}

int main(int argc, char **argv){
    // - auch hier gehören die Klammern hinter den Variablennamen: int v[4]
    // - v soll vermutlich vector heißen
    int[4] v = {1,1,1,1};
    vector = times(vector, 2);
    // - auch hier wird mit v wohl vector gemeint sein
    printf("(%d,%d,%d,%d)", v[1],v[2],v[3],v[4]);
    return 0;
}


Aufgabe 2:
a)
Der Speicherfehler wird durch das ändern der Zeile 15 in
scanf("%d", &val);
"behoben". Die Methode scanf verlangt Pointer als Parameter und mit dem & wird
die Adresse der Variable übergeben.
Behoben ist damit aber nur der Speicherfehler. Gibt man Buchstaben ein, werden
diese in int übersetzt und für zu große Werte wird die Variable val nur auf den
größten zugelassenen Wert für int gesetzt.
b)
Ein Speicherfehler kann entstehen wenn n größer als die Länge von x oder die
Länge und "Höhe" von A ist. Dann würden die Zugriffe A[i][j] und x[j]
schiefgehen.
c)
Der Aufruf gets() ließt solange ein, bis entweder EoF oder newline Eintritt.
Evtl. ist der String der eingelesen wird allerdings länger als die 64 Einträge,
die das Char Array zur Verfügung stellt.
d)
Der Fehler kann aufgrund von sizeof(int) aus Zeile 61 auftreten. Man möchte hier
n Pointer auf ein int Array bekommen. Für jeden Pointer wird im nachhinein
nocheinmal Platz für ein Array allokiert, welches m ints beinhalten kann. Je
nach System auf dem das Programm läuft ist sizeof(int) != sizeof(int*). Da beim
durchlaufen eines Arrays immer um die Speichergröße weitergegangen wird, kann es
sein das man zB anstatt 4 8 Bytes weitergeht und somit auf falsche Werte zeigt
oder sogar in falsche Adressräume schreibt.
e)
Der Fehler liegt in Zeile 79. Durch i <= n als Abbruchbedingung wird noch für
A[n] ein Arrayspeicher allokiert. Für den Pointer auf dieses Array ist aber in
Zeile 77 kein Speicher allokiert worden.
f)
g)
Ein Fehler kommt durch p += sizeof(int) generiert. Wenn ich der Methode ein
Array übergebe und mir den Wert auf den p zeigt vor jedem p+= ausgebe, merke ich,
dass der Pointer um 4 Werte weiterspringt. Dies kommt zu stande, da das addieren
von x auf eine Adresse diese um x mal die Größe des Datentyps erhöht. sizeof(int)
gibt in meinem Fall 4 zurück (int ist 4Byte groß), sodass p um 4*sizeof(int)
erhöht wird. p+=1 würde das richtige Ergebnis liefern, da durch das array
gelaufen werden soll.
h)
int val wird nur local erstellt und dann wird die Adresse val übergeben. Der
Speicher wird am Ende der Methode aber wieder freigegeben, sodass der Inhalt
der Adresse von der aufrufenden Methode nichtmehr richtig gelesen werden kann.
i)
Der Fehler wird prdouziert durch die Zeile 150. Genauer gesagt durch das x[i]++,
denn x wurde in Zeile 146 bereits freigegeben und somit ist der Speicher vllt.
bereits anders belegt. Evtl. sogar durch y selbst.
j)
Der Speicherfehler ist hier ein fehlendes free(). In der Methode wird
Speicher für x allokiert. Dadurch, das der Zeiger auf den allokierten Speicher
auch nicht aus der Methode herausgegeben wird, kann man auch nicht erwarten das
er von außen wieder freigegeben wird.


Aufgabe 3:
a) $ ps -e | grep foo
ps -e gibt eine Liste aller Prozesse aus die gerade laufen. Mit dem Zusatz grep
foo werden diese nach foo gefiltert. Man bekommt also alle Prozesse ausgegeben,
die foo im Namen tragen.

b) $ kill -9 3492
Killed (Beendet) den Prozess mit der Nummer 3492 sofort.

c) $ find . -name datei
Sucht im aktuellen Verzeichnis(signalisiert durch den Punkt) und den
Unterverzeichnissen nach einer Datei oder einem Ordner mit dem Namen "datei".

d) $ top -n 10 -u root
top ist eine Art Taskmanager. Es zeigt die aktuell Laufenden Prozesse an und
aktualisiert sich dauerhaft automatisch. -u root beschränkt die angezeigten
Prozesse auf den Nutzer root. Mit -n 10 läuft top nur bis man 10 mal refreshed
hat

e) $ cat -n test.txt
Zeigt die Datei test.txt auf der Commandozeile. -n Gibt Zeilenangaben vor jeder
Zeile an

f) $ sudo chmod 734 HelloWorld
chmod ändert die Lese und Schreib Berechtigungen der Datei HelloWorld.
734 steht dabei für die Rechte die zugeilt werden sollen.
7 steht für rwx was bedeutet der Nutzer kann die Datei lesen, schreiben und
ausführen.
3 steht für wx. Die Gruppe hat Schreib und Ausführrechte.
4 steht nur für w. Jede Person kann diese Person lesen.
sudo ist ein vorgeschaltetes Programm mit dem es möglich ist Programme als ein
anderer Nutzer auszuführen der zB mehr Rechte besitzt.

g) $ diff -q hello.txt bye.txt
Vergleicht beide Dateien und gibt an ob sie sich unterscheiden oder gleich sind.
Ohne das -q gibt es beide Dateien auf der Kommando Zeile aus.

h) $ tar cjvf foobar.tar.bz2 foobar
Tar comprimiert die Datei foobar zu foobar.tar.bz2
c wird mitgegeben um zu sagen das ein Archiv erstellt werden soll.
Durch j wird das bzip2 Verfahren genutzt.
v Gibt nochmal alle komprimierten Dateien auf der Kommandozeile aus.
f wird benötigt um den Dateinamen der Zieldatei mitzugeben.


i) $ du -hs .
du listet alle Dateien auf die sich im Verzeichnis (hier . Also da wo man sich
befindet) befinden mit ihren Größen auf. Durch -h werden die Dateigrößen in für
Menschen lesbar dargestellt (MB, KB etc.) und durch -s wird nur angezeigt wie
viel Platz alle Dateien zusammen einnehmen.

j) $ wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-\
4.0.tar.xz; tar xJf linux-4.0.tar.xz; grep -R --\
include=*.[hcS] ' fuck\| shit' linux-4.0 | wc -l
Dieser Command besteht aus 3 Teilen.
1. wget downloadet die Datei des angegebenen Links.
2. tar linux-4.0.tar.xz entpackt diese dann.
3. grep durchsucht Archiv dann Rekursiv und mit alles symbolic links also
Verknüpfungen nach Dateien die die Dateiendung h, c oder S haben. Danach sucht
es in den Dateien nach den Wörtern 'fuck' und 'shit' und zählt mit wc -l die
Zeilen in denen die Wörter vorkommen.
